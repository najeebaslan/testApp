{"message":"createUser-- This email already exists .","level":"error","timestamp":"2021-11-21T22:46:05.123Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2021-11-21T23:07:28.885Z"}
{"message":"validationRegister-- \"phone\" must be a string","level":"error","timestamp":"2021-11-21T23:11:35.442Z"}
{"message":"createUser-- Cannot access 'my_User' before initialization","level":"error","timestamp":"2021-11-21T23:13:18.301Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2021-11-21T23:17:26.373Z"}
{"message":"validationRegister-- \"phone\" must be a string","level":"error","timestamp":"2021-11-21T23:18:09.798Z"}
{"message":"validationRegister-- \"phone\" must be a string","level":"error","timestamp":"2021-11-21T23:19:40.770Z"}
{"message":"Error no connected to DatabaseMongooseServerSelectionError: connect ECONNREFUSED 127.0.0.1:27017","level":"error","timestamp":"2022-05-21T13:19:01.329Z"}
{"message":"validationRegister-- \"phone\" must be a string","level":"error","timestamp":"2022-05-21T13:23:54.864Z"}
{"message":"validationRegister-- \"language\" is required","level":"error","timestamp":"2022-05-21T13:24:25.070Z"}
{"message":"validationRegister-- \"language\" is not allowed to be empty","level":"error","timestamp":"2022-05-21T13:26:21.967Z"}
{"message":"validationRegister-- \"language\" must be one of [English, Arabic]","level":"error","timestamp":"2022-05-21T13:26:29.589Z"}
{"message":"validationRegister-- \"lat\" is required","level":"error","timestamp":"2022-05-21T13:26:38.470Z"}
{"message":"validationRegister-- \"lat\" is not allowed to be empty","level":"error","timestamp":"2022-05-21T13:26:54.507Z"}
{"message":"validationRegister-- \"lon\" is required","level":"error","timestamp":"2022-05-21T13:27:02.962Z"}
{"message":"validationRegister-- \"level\" is required","level":"error","timestamp":"2022-05-21T13:27:32.043Z"}
{"message":"validationRegister-- \"status\" is required","level":"error","timestamp":"2022-05-21T13:27:48.443Z"}
{"message":"validationRegister-- \"status\" is not allowed to be empty","level":"error","timestamp":"2022-05-21T13:28:09.934Z"}
{"message":"validationRegister-- \"temperature\" is required","level":"error","timestamp":"2022-05-21T13:28:15.827Z"}
{"message":"validationRegister-- \"capacity\" is required","level":"error","timestamp":"2022-05-21T13:28:36.852Z"}
{"message":"validationRegister-- \"ip_Address\" is required","level":"error","timestamp":"2022-05-21T13:28:49.926Z"}
{"message":"validationRegister-- \"gateway\" is required","level":"error","timestamp":"2022-05-21T13:29:04.261Z"}
{"message":"validationRegister-- \"interface\" is required","level":"error","timestamp":"2022-05-21T13:29:14.448Z"}
{"message":"Auth==>JsonWebTokenError: invalid signature","level":"error","timestamp":"2022-05-21T13:56:59.042Z"}
{"message":"Auth==>JsonWebTokenError: invalid signature","level":"error","timestamp":"2022-05-21T13:59:13.892Z"}
{"message":" Validation Details User-- \"user_Type\" is required","level":"error","timestamp":"2022-05-21T13:59:38.029Z"}
{"message":" Validation Details User-- \"user_Type\" must be one of [network_Owner, network_Engineer, Client]","level":"error","timestamp":"2022-05-21T13:59:47.399Z"}
{"message":" Validation Details User-- \"sex\" must be one of [Custom, Female, Male]","level":"error","timestamp":"2022-05-21T13:59:54.772Z"}
{"message":" Validation Details User-- \"level\" is required","level":"error","timestamp":"2022-05-21T14:00:05.740Z"}
{"message":" Validation Details User-- \"status\" is required","level":"error","timestamp":"2022-05-21T14:00:23.017Z"}
{"message":" Validation Details User-- \"temperature\" is required","level":"error","timestamp":"2022-05-21T14:00:34.585Z"}
{"message":" Validation Details User-- \"capacity\" is required","level":"error","timestamp":"2022-05-21T14:00:50.528Z"}
{"message":" Validation Details User-- \"ip_Address\" is required","level":"error","timestamp":"2022-05-21T14:01:00.266Z"}
{"message":" Validation Details User-- \"gateway\" is required","level":"error","timestamp":"2022-05-21T14:01:12.261Z"}
{"message":" Validation Details User-- \"interface\" is required","level":"error","timestamp":"2022-05-21T14:01:24.525Z"}
{"message":" Validation Details User-- \"dbm\" is required","level":"error","timestamp":"2022-05-21T14:01:34.480Z"}
{"message":" Validation Details User-- \"Apps\" is required","level":"error","timestamp":"2022-05-21T14:01:48.082Z"}
{"message":" Validation Details User-- \"ram\" is required","level":"error","timestamp":"2022-05-21T14:02:19.361Z"}
{"message":" Validation Details User-- \"devices_Name\" is not allowed","level":"error","timestamp":"2022-05-21T14:02:36.184Z"}
{"message":" Validation Details User-- \"model\" is not allowed","level":"error","timestamp":"2022-05-21T14:03:29.442Z"}
{"message":" Validation Details User-- \"Manufacturer\" is not allowed","level":"error","timestamp":"2022-05-21T14:03:39.970Z"}
{"message":" Validation Details User-- \"Device_Id\" is not allowed","level":"error","timestamp":"2022-05-21T14:03:46.246Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:05:35.452Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:06:18.270Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:10:55.843Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:13:06.993Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:14:04.971Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:14:36.515Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:14:58.340Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:15:33.899Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:16:21.575Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:16:30.589Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:23:05.491Z"}
{"message":"Login-- Cannot populate path `-createdAt` because it is not in your schema. Set the `strictPopulate` option to false to override.","level":"error","timestamp":"2022-05-21T14:23:52.951Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:25:18.966Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:26:12.727Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:26:35.512Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:26:55.743Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:27:15.398Z"}
{"message":"Auth==>JsonWebTokenError: invalid signature","level":"error","timestamp":"2022-05-21T14:30:57.786Z"}
{"message":"create_Network==>Image must be added .","level":"error","timestamp":"2022-05-21T14:31:12.638Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:37:48.851Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:38:21.314Z"}
{"message":"Login-- Illegal arguments: string, undefined","level":"error","timestamp":"2022-05-21T14:39:50.083Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:40:19.128Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:40:35.434Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:40:47.952Z"}
{"message":"Login-- Cannot read properties of null (reading 'generateTokens')","level":"error","timestamp":"2022-05-21T14:46:54.959Z"}
{"message":"Login-- Cannot read properties of null (reading 'generateTokens')","level":"error","timestamp":"2022-05-21T14:47:10.993Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:48:30.796Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:48:45.245Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:48:58.828Z"}
{"message":"Login-findDeviceInfo-- this user is not found .","level":"error","timestamp":"2022-05-21T14:49:26.008Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:49:37.176Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:49:38.224Z"}
{"message":"Login-- Invalid select: select only takes 1 argument","level":"error","timestamp":"2022-05-21T14:49:47.722Z"}
{"message":"validationLogin-- \"level\" is required","level":"error","timestamp":"2022-05-21T14:52:05.244Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T14:57:08.526Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T14:59:44.217Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:01:22.862Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:06:23.844Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:08:47.485Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:15:22.467Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:16:03.776Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:18:32.633Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:22:22.514Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:22:38.051Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:23:36.601Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:23:58.006Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:24:15.923Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:24:44.629Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-21T15:27:05.686Z"}
{"message":"Login-- Cannot read properties of undefined (reading 'details')","level":"error","timestamp":"2022-05-21T15:31:26.037Z"}
{"message":"Login-- not found this user","level":"error","timestamp":"2022-05-21T15:32:25.406Z"}
{"message":"PostAllCoverage-- \"name\" is required","level":"error","timestamp":"2022-05-21T15:33:20.789Z"}
{"message":"PostAllCoverage-- \"net_Id\" is required","level":"error","timestamp":"2022-05-21T15:33:27.478Z"}
{"message":"PostAllCoverage-- not found this network .","level":"error","timestamp":"2022-05-21T15:36:17.636Z"}
{"message":"PostAllCoverage-- not found this network .","level":"error","timestamp":"2022-05-21T15:36:32.880Z"}
{"message":"Auth==>JsonWebTokenError: invalid signature","level":"error","timestamp":"2022-05-21T15:46:39.520Z"}
{"message":"PostDetailsPackage-- \"details_Data\" is required","level":"error","timestamp":"2022-05-21T15:46:58.440Z"}
{"message":"PostDetailsPackage-- \"package_validity\" is required","level":"error","timestamp":"2022-05-21T15:47:15.158Z"}
{"message":"PostDetailsPackage-- \"package_Price\" is required","level":"error","timestamp":"2022-05-21T15:47:20.807Z"}
{"message":"PostDetailsPackage-- \"package_PriceId\" is not allowed","level":"error","timestamp":"2022-05-21T15:47:55.862Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:48:12.689Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:48:27.807Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:48:47.068Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:50:38.550Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:51:18.505Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:53:01.932Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:54:16.491Z"}
{"message":"Find_Level_User-- this user is not found .","level":"error","timestamp":"2022-05-21T15:54:52.626Z"}
{"message":"PostDetailsPackage-- \"user_initiate\" is required","level":"error","timestamp":"2022-05-21T15:56:01.312Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T15:57:26.996Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:01:43.392Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:06:05.563Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:10:24.196Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:10:52.594Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:11:13.728Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:11:35.463Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:12:31.667Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:13:34.941Z"}
{"message":"Find_Level_User-- You must create details user .","level":"error","timestamp":"2022-05-21T16:30:11.844Z"}
{"message":"Find_Level_User-- You must create network .","level":"error","timestamp":"2022-05-21T16:30:31.899Z"}
{"message":"validationRegister-- \"phone\" must be a string","level":"error","timestamp":"2022-05-22T12:31:46.908Z"}
{"message":"validationRegister-- \"language\" is required","level":"error","timestamp":"2022-05-22T12:32:57.387Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2022-05-22T12:35:17.276Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:36:29.230Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:37:34.977Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:37:36.225Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:38:43.629Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:38:46.005Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:40:54.666Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:41:52.223Z"}
{"message":"Auth==>ReferenceError: token is not defined","level":"error","timestamp":"2022-05-22T12:42:55.653Z"}
{"message":"Auth==>ReferenceError: token is not defined","level":"error","timestamp":"2022-05-22T12:43:12.675Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:44:02.341Z"}
{"message":"Auth==>JsonWebTokenError: invalid signature","level":"error","timestamp":"2022-05-22T12:45:44.140Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:46:48.578Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:47:14.229Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:47:54.455Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:48:19.722Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:48:33.651Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:48:49.537Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:49:07.451Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:50:21.124Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:50:22.433Z"}
{"message":"getAllArea-- Areas not found .","level":"error","timestamp":"2022-05-22T12:50:40.216Z"}
{"message":"Auth==>ReferenceError: token is not defined","level":"error","timestamp":"2022-05-22T13:08:01.765Z"}
{"message":"getAllAreaByIdNetwork-- Cast to ObjectId failed for value \"{ _id: 'location' }\" (type Object) at path \"net_Id\" for model \"coverage\"","level":"error","timestamp":"2022-05-22T13:09:05.324Z"}
{"message":"getAllAreaByIdNetwork-- Cast to ObjectId failed for value \"{ _id: 'location' }\" (type Object) at path \"net_Id\" for model \"coverage\"","level":"error","timestamp":"2022-05-22T13:10:13.605Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:12:11.512Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:13:10.133Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:14:14.958Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:14:31.920Z"}
{"message":"getAllAreaByIdNetwork-- Cannot read properties of undefined (reading 'governorate')","level":"error","timestamp":"2022-05-22T13:14:48.875Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:15:11.465Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:15:23.353Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:23:32.799Z"}
{"message":"getAllAreaByIdNetwork-- Argument passed in does not match the accepted types","level":"error","timestamp":"2022-05-22T13:24:00.391Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:24:27.362Z"}
{"message":"getAllAreaByIdNetwork-- Cast to ObjectId failed for value \"{ _id: 'location' }\" (type Object) at path \"net_Id\" for model \"coverage\"","level":"error","timestamp":"2022-05-22T13:24:48.017Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:25:19.817Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ rr: 'rr' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:25:54.672Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'rr' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:26:31.493Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'governorate' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:26:49.500Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"<ref *2> IncomingMessage {\n  _readableState: ReadableState {\n    objectMode: false,\n    highWaterMark: 16384,\n    buffer: BufferList { head: null, tail: null, length: 0 },\n    length: 0,\n    pipes: [],\n    flowing: null,\n    ended: true,\n    endEmitted: false,\n    reading: false,\n    constructed: true,\n    sync: true,\n    needReadable: false,\n    emittedReadable: false,\n    readableListening: false,\n    resumeScheduled: false,\n    errorEmitted: false,\n    emitClose: true,\n    autoDestroy: true,\n    destroyed: false,\n    errored: null,\n    closed: false,\n    closeEmitted: false,\n    defaultEncoding: 'utf8',\n    awaitDrainWriters: null,\n    multiAwaitDrain: false,\n    readingMore: true,\n    dataEmitted: false,\n    decoder: null,\n    encoding: null,\n    [Symbol(kPaused)]: null\n  },\n  _events: [Object: null prototype] { end: [Function: clearRequestTimeout] },\n  _eventsCount: 1,\n  _maxListeners: undefined,\n  socket: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Array],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 31\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 31\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      flush: [Function: flush],\n      write: [Function: write],\n      end: [Function: end],\n      on: [Function: on],\n      writeHead: [Function: writeHead],\n      _startAt: undefined,\n      _startTime: undefined,\n      __onFinished: [Function],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    _peername: { address: '::1', family: 'IPv6', port: 63105 },\n    [Symbol(async_id_symbol)]: 362,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  httpVersionMajor: 1,\n  httpVersionMinor: 1,\n  httpVersion: '1.1',\n  complete: true,\n  rawHeaders: [\n    'Authorization',\n    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjhhMmUwZGU4ZGI3ZjkzZDcxZGM4NWQiLCJpc0FkbWluIjpmYWxzZSwiaXNCbG9jayI6ZmFsc2UsImxhbmd1YWdlIjoiRW5nbGlzaCIsImlhdCI6MTY1MzIyMjkyNX0.kRPTrqCzJHGeWZHdFWvj-o-iy5jN3mN27Uqs1nSVqUw',\n    'User-Agent',\n    'PostmanRuntime/7.29.0',\n    'Accept',\n    '*/*',\n    'Postman-Token',\n    '6efb1617-355b-457c-865f-272913abd9e1',\n    'Host',\n    'localhost:3000',\n    'Accept-Encoding',\n    'gzip, deflate, br',\n    'Connection',\n    'keep-alive'\n  ],\n  rawTrailers: [],\n  aborted: false,\n  upgrade: false,\n  url: '/location/governorate?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n  method: 'GET',\n  statusCode: null,\n  statusMessage: null,\n  client: <ref *1> Socket {\n    connecting: false,\n    _hadError: false,\n    _parent: null,\n    _host: null,\n    _readableState: ReadableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      buffer: BufferList { head: null, tail: null, length: 0 },\n      length: 0,\n      pipes: [],\n      flowing: true,\n      ended: false,\n      endEmitted: false,\n      reading: true,\n      constructed: true,\n      sync: false,\n      needReadable: true,\n      emittedReadable: false,\n      readableListening: false,\n      resumeScheduled: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      destroyed: false,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      defaultEncoding: 'utf8',\n      awaitDrainWriters: null,\n      multiAwaitDrain: false,\n      readingMore: false,\n      dataEmitted: false,\n      decoder: null,\n      encoding: null,\n      [Symbol(kPaused)]: false\n    },\n    _events: [Object: null prototype] {\n      end: [Array],\n      timeout: [Function: socketOnTimeout],\n      data: [Function: bound socketOnData],\n      error: [Array],\n      close: [Array],\n      drain: [Function: bound socketOnDrain],\n      resume: [Function: onSocketResume],\n      pause: [Function: onSocketPause]\n    },\n    _eventsCount: 8,\n    _maxListeners: undefined,\n    _writableState: WritableState {\n      objectMode: false,\n      highWaterMark: 16384,\n      finalCalled: false,\n      needDrain: false,\n      ending: false,\n      ended: false,\n      finished: false,\n      destroyed: false,\n      decodeStrings: false,\n      defaultEncoding: 'utf8',\n      length: 0,\n      writing: false,\n      corked: 0,\n      sync: true,\n      bufferProcessing: false,\n      onwrite: [Function: bound onwrite],\n      writecb: null,\n      writelen: 0,\n      afterWriteTickInfo: null,\n      buffered: [],\n      bufferedIndex: 0,\n      allBuffers: true,\n      allNoop: true,\n      pendingcb: 0,\n      constructed: true,\n      prefinished: false,\n      errorEmitted: false,\n      emitClose: false,\n      autoDestroy: true,\n      errored: null,\n      closed: false,\n      closeEmitted: false,\n      [Symbol(kOnFinished)]: []\n    },\n    allowHalfOpen: true,\n    _sockname: null,\n    _pendingData: null,\n    _pendingEncoding: '',\n    server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 31\n    },\n    _server: Server {\n      maxHeaderSize: undefined,\n      insecureHTTPParser: undefined,\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      _connections: 1,\n      _handle: [TCP],\n      _usingWorkers: false,\n      _workers: [],\n      _unref: false,\n      allowHalfOpen: true,\n      pauseOnConnect: false,\n      httpAllowHalfOpen: false,\n      timeout: 0,\n      keepAliveTimeout: 5000,\n      maxHeadersCount: null,\n      maxRequestsPerSocket: 0,\n      headersTimeout: 60000,\n      requestTimeout: 0,\n      _connectionKey: '6::::3000',\n      [Symbol(IncomingMessage)]: [Function: IncomingMessage],\n      [Symbol(ServerResponse)]: [Function: ServerResponse],\n      [Symbol(kCapture)]: false,\n      [Symbol(async_id_symbol)]: 31\n    },\n    parser: HTTPParser {\n      '0': [Function: bound setRequestTimeout],\n      '1': [Function: parserOnHeaders],\n      '2': [Function: parserOnHeadersComplete],\n      '3': [Function: parserOnBody],\n      '4': [Function: parserOnMessageComplete],\n      '5': [Function: bound onParserExecute],\n      '6': [Function: bound onParserTimeout],\n      _headers: [],\n      _url: '',\n      socket: [Circular *1],\n      incoming: [Circular *2],\n      outgoing: null,\n      maxHeaderPairs: 2000,\n      _consumed: true,\n      onIncoming: [Function: bound parserOnIncoming],\n      [Symbol(owner_symbol)]: [HTTPServerAsyncResource]\n    },\n    on: [Function: socketListenerWrap],\n    addListener: [Function: socketListenerWrap],\n    prependListener: [Function: socketListenerWrap],\n    setEncoding: [Function: socketSetEncoding],\n    _paused: false,\n    _httpMessage: ServerResponse {\n      _events: [Object: null prototype],\n      _eventsCount: 2,\n      _maxListeners: undefined,\n      outputData: [],\n      outputSize: 0,\n      writable: true,\n      destroyed: false,\n      _last: false,\n      chunkedEncoding: false,\n      shouldKeepAlive: true,\n      maxRequestsOnConnectionReached: false,\n      _defaultKeepAlive: true,\n      useChunkedEncodingByDefault: true,\n      sendDate: true,\n      _removedConnection: false,\n      _removedContLen: false,\n      _removedTE: false,\n      _contentLength: null,\n      _hasBody: true,\n      _trailer: '',\n      finished: false,\n      _headerSent: false,\n      _closed: false,\n      socket: [Circular *1],\n      _header: null,\n      _keepAliveTimeout: 5000,\n      _onPendingData: [Function: bound updateOutgoingData],\n      req: [Circular *2],\n      _sent100: false,\n      _expect_continue: false,\n      locals: [Object: null prototype] {},\n      flush: [Function: flush],\n      write: [Function: write],\n      end: [Function: end],\n      on: [Function: on],\n      writeHead: [Function: writeHead],\n      _startAt: undefined,\n      _startTime: undefined,\n      __onFinished: [Function],\n      [Symbol(kCapture)]: false,\n      [Symbol(kNeedDrain)]: false,\n      [Symbol(corked)]: 0,\n      [Symbol(kOutHeaders)]: [Object: null prototype]\n    },\n    _peername: { address: '::1', family: 'IPv6', port: 63105 },\n    [Symbol(async_id_symbol)]: 362,\n    [Symbol(kHandle)]: TCP {\n      reading: true,\n      onconnection: null,\n      _consumed: true,\n      [Symbol(owner_symbol)]: [Circular *1]\n    },\n    [Symbol(kSetNoDelay)]: false,\n    [Symbol(lastWriteQueueSize)]: 0,\n    [Symbol(timeout)]: null,\n    [Symbol(kBuffer)]: null,\n    [Symbol(kBufferCb)]: null,\n    [Symbol(kBufferGen)]: null,\n    [Symbol(kCapture)]: false,\n    [Symbol(kBytesRead)]: 0,\n    [Symbol(kBytesWritten)]: 0,\n    [Symbol(RequestTimeout)]: undefined\n  },\n  _consuming: false,\n  _dumped: false,\n  next: [Function: next],\n  baseUrl: '/area',\n  originalUrl: '/area/location/governorate?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n  _parsedUrl: Url {\n    protocol: null,\n    slashes: null,\n    auth: null,\n    host: null,\n    port: null,\n    hostname: null,\n    hash: null,\n    search: '?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n    query: 'governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n    pathname: '/location/governorate',\n    path: '/location/governorate?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n    href: '/location/governorate?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9',\n    _raw: '/location/governorate?governorate=%D8%A7%D9%84%D8%AD%D8%AF%D9%8A%D8%AF%D8%A9'\n  },\n  params: { governorate: 'governorate' },\n  query: { governorate: 'الحديدة' },\n  res: <ref *3> ServerResponse {\n    _events: [Object: null prototype] {\n      finish: [Array],\n      end: [Function: onevent]\n    },\n    _eventsCount: 2,\n    _maxListeners: undefined,\n    outputData: [],\n    outputSize: 0,\n    writable: true,\n    destroyed: false,\n    _last: false,\n    chunkedEncoding: false,\n    shouldKeepAlive: true,\n    maxRequestsOnConnectionReached: false,\n    _defaultKeepAlive: true,\n    useChunkedEncodingByDefault: true,\n    sendDate: true,\n    _removedConnection: false,\n    _removedContLen: false,\n    _removedTE: false,\n    _contentLength: null,\n    _hasBody: true,\n    _trailer: '',\n    finished: false,\n    _headerSent: false,\n    _closed: false,\n    socket: <ref *1> Socket {\n      connecting: false,\n      _hadError: false,\n      _parent: null,\n      _host: null,\n      _readableState: [ReadableState],\n      _events: [Object: null prototype],\n      _eventsCount: 8,\n      _maxListeners: undefined,\n      _writableState: [WritableState],\n      allowHalfOpen: true,\n      _sockname: null,\n      _pendingData: null,\n      _pendingEncoding: '',\n      server: [Server],\n      _server: [Server],\n      parser: [HTTPParser],\n      on: [Function: socketListenerWrap],\n      addListener: [Function: socketListenerWrap],\n      prependListener: [Function: socketListenerWrap],\n      setEncoding: [Function: socketSetEncoding],\n      _paused: false,\n      _httpMessage: [Circular *3],\n      _peername: [Object],\n      [Symbol(async_id_symbol)]: 362,\n      [Symbol(kHandle)]: [TCP],\n      [Symbol(kSetNoDelay)]: false,\n      [Symbol(lastWriteQueueSize)]: 0,\n      [Symbol(timeout)]: null,\n      [Symbol(kBuffer)]: null,\n      [Symbol(kBufferCb)]: null,\n      [Symbol(kBufferGen)]: null,\n      [Symbol(kCapture)]: false,\n      [Symbol(kBytesRead)]: 0,\n      [Symbol(kBytesWritten)]: 0,\n      [Symbol(RequestTimeout)]: undefined\n    },\n    _header: null,\n    _keepAliveTimeout: 5000,\n    _onPendingData: [Function: bound updateOutgoingData],\n    req: [Circular *2],\n    _sent100: false,\n    _expect_continue: false,\n    locals: [Object: null prototype] {},\n    flush: [Function: flush],\n    write: [Function: write],\n    end: [Function: end],\n    on: [Function: on],\n    writeHead: [Function: writeHead],\n    _startAt: undefined,\n    _startTime: undefined,\n    __onFinished: [Function: listener] { queue: [Array] },\n    [Symbol(kCapture)]: false,\n    [Symbol(kNeedDrain)]: false,\n    [Symbol(corked)]: 0,\n    [Symbol(kOutHeaders)]: [Object: null prototype] {\n      'access-control-allow-origin': [Array],\n      'content-security-policy': [Array],\n      'x-dns-prefetch-control': [Array],\n      'expect-ct': [Array],\n      'x-frame-options': [Array],\n      'strict-transport-security': [Array],\n      'x-download-options': [Array],\n      'x-content-type-options': [Array],\n      'x-permitted-cross-domain-policies': [Array],\n      'referrer-policy': [Array],\n      'x-xss-protection': [Array]\n    }\n  },\n  body: {},\n  _startAt: [ 19617, 868144400 ],\n  _startTime: 2022-05-22T13:28:32.994Z,\n  _remoteAddress: '::1',\n  route: Route {\n    path: '/location/:governorate',\n    stack: [ [Layer], [Layer], [Layer] ],\n    methods: { get: true }\n  },\n  user: {\n    _id: '628a2e0de8db7f93d71dc85d',\n    isAdmin: false,\n    isBlock: false,\n    language: 'English',\n    iat: 1653222925\n  },\n  [Symbol(kCapture)]: false,\n  [Symbol(kHeaders)]: {\n    authorization: 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2MjhhMmUwZGU4ZGI3ZjkzZDcxZGM4NWQiLCJpc0FkbWluIjpmYWxzZSwiaXNCbG9jayI6ZmFsc2UsImxhbmd1YWdlIjoiRW5nbGlzaCIsImlhdCI6MTY1MzIyMjkyNX0.kRPTrqCzJHGeWZHdFWvj-o-iy5jN3mN27Uqs1nSVqUw',\n    'user-agent': 'PostmanRuntime/7.29.0',\n    accept: '*/*',\n    'postman-token': '6efb1617-355b-457c-865f-272913abd9e1',\n    host: 'localhost:3000',\n    'accept-encoding': 'gzip, deflate, br',\n    connection: 'keep-alive'\n  },\n  [Symbol(kHeadersCount)]: 14,\n  [Symbol(kTrailers)]: null,\n  [Symbol(kTrailersCount)]: 0,\n  [Symbol(RequestTimeout)]: undefined\n}\" (type IncomingMessage) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:28:33.036Z"}
{"message":"getAllAreaByIdNetwork-- Cast to string failed for value \"{ governorate: 'الحديدة' }\" (type Object) at path \"governorate\" for model \"location\"","level":"error","timestamp":"2022-05-22T13:29:36.091Z"}
{"message":"getAllAreaByIdNetwork-- body is not defined","level":"error","timestamp":"2022-05-22T13:35:37.408Z"}
{"message":"getAllAreaByIdNetwork-- body is not defined","level":"error","timestamp":"2022-05-22T13:37:14.248Z"}
{"message":"getAllAreaByIdNetwork-- Argument passed in must be a string of 12 bytes or a string of 24 hex characters","level":"error","timestamp":"2022-05-22T13:38:05.040Z"}
{"message":"getAllAreaByIdNetwork-- Argument passed in must be a string of 12 bytes or a string of 24 hex characters","level":"error","timestamp":"2022-05-22T13:38:12.873Z"}
{"message":"getAllAreaByIdNetwork-- Argument passed in must be a string of 12 bytes or a string of 24 hex characters","level":"error","timestamp":"2022-05-22T13:39:57.852Z"}
{"message":"getAllAreaByIdNetwork-- body is not defined","level":"error","timestamp":"2022-05-22T13:40:45.030Z"}
{"message":"getAllAreaByIdNetwork-- body is not defined","level":"error","timestamp":"2022-05-22T13:41:17.048Z"}
{"message":"getAllAreaByIdNetwork-- Invalid $project :: caused by :: Missing 'cond' parameter to $filter","level":"error","timestamp":"2022-05-22T13:41:28.563Z"}
{"message":"getAllAreaByIdNetwork-- body is not defined","level":"error","timestamp":"2022-05-22T13:46:53.557Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2022-05-22T14:47:09.882Z"}
{"message":"createUser-- This email already exists .","level":"error","timestamp":"2022-05-22T14:47:18.828Z"}
{"message":"findDeviceInfo-Save_De_St-- req is not defined","level":"error","timestamp":"2022-05-22T14:48:16.017Z"}
{"message":"PostDetailsUser-- Cannot set headers after they are sent to the client","level":"error","timestamp":"2022-05-22T14:48:16.020Z"}
{"message":"findDeviceInfo-Save_De_St-- req is not defined","level":"error","timestamp":"2022-05-22T14:59:26.891Z"}
{"message":"PostDetailsUser-- Cannot set headers after they are sent to the client","level":"error","timestamp":"2022-05-22T14:59:26.894Z"}
{"message":"Find_Level_User-- You must create details user .","level":"error","timestamp":"2022-05-22T15:01:31.442Z"}
{"message":"findDeviceInfo-Save_De_St-- req is not defined","level":"error","timestamp":"2022-05-22T15:02:40.386Z"}
{"message":"PostDetailsUser-- Cannot set headers after they are sent to the client","level":"error","timestamp":"2022-05-22T15:02:40.388Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-22T15:05:39.055Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2022-05-22T15:09:15.969Z"}
{"message":"createUser-- Phone number already exists .","level":"error","timestamp":"2022-05-22T15:12:17.237Z"}
{"message":" Validation Details User-- \"devices_Name\" is required","level":"error","timestamp":"2022-05-22T15:12:51.010Z"}
{"message":" Validation Details User-- \"devices_Name\" is required","level":"error","timestamp":"2022-05-22T15:14:46.156Z"}
{"message":"Find_Level_User-- You must create details user .","level":"error","timestamp":"2022-05-22T15:17:09.019Z"}
{"level":"error","message":"Save_log_Operation","timestamp":"2022-05-22T15:17:55.634Z"}
